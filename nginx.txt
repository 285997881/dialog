nginx (engine x)

http://nginx.org/
http://wiki.nginx.org/

http://nginx.org/download/nginx-1.9.3.tar.gz


GCC编译器
yum install gcc gcc-c++ autoconf automake
依赖包
yum install zlib zlib-devel openssl openssl-devel pcre pcre-devel


tar xvf nginx
cd nginx
./configure --
make && make install


./nginx -V   #查看nginx编译时，用到的参数

nginx.conf
	events
	http	
		server
			location
		upstream

		
		
		
		
-t
-s reload 

模块

核心模块
user  nobody
worker_processes			#工作进程数
error_log					#错误日志的路径
pid 						#pid文件的存放位置

events {
		use kqueue|rtsig|epoll|/dev/poll|select|poll
		worker_connections	#进程的最大连接数,默认1024

	}
use  kqueue|rtsig|epoll|/dev/poll|select|poll
select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中。对于Linux系统，epoll工作模式是首选	
	
http{	
sendfile on					
keepalive-timeout   
autoindex on						#开启目录列表访问，合适下载服务器，默认关闭
client_max_body_size 10m			#允许客户端请求的最大单文件字节数
client_body_buffer_size 128k		#缓冲区代理缓冲用户端请求的最大字节数
tcp_nopush on; #防止网络阻塞
tcp_nodelay on; #防止网络阻塞


sendfile on|off
#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。

autoindex

autoindex on|off
autoindex_exact_size on|off
autoindex_format html|xml|json|jsonp
autoindex_localtime on|off


log
access_log path index.php index.jsp
error_log
log_farmat

server{
	listen 8080;
	server_name localhost.com
	index index.html index.htm 
	root /path/path
	charset
	access_log /path/file
	}



memcached



gzip(ngx_http_gzip_module)

gzip 				on|off;
gzip_buffers		4 16k;
gzip_min_length 	1000;#允许压缩的页面最小字节
gzip_types			text/plain application/x-javascript 
					text/css application/xml text/javascript
					application/x-httpd-php;
gzip_comp_level				#压缩比例，默认1，可到9
gzip_http_version			#http的协议版本,默认1.1
gzip_vary			on|off		和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩
gzip_buffers		4 16k;
设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k 代表以 16k 为单位，按照原始数据大小以 16k 为单位的4倍申请内存。
gzip_proxied     根据某些请求和应答来决定是否在对代理请求的应答启用压缩，事实上，代理请求取决于请求头中的“Via”字段，指令中可以同时指定多个不同的参数：
			off 
			expired 	当“Expires”头禁用缓存时启用压缩
			no-cache	当“Cache-Control”头设置为no-cache时启用压缩
			no-store	当“Cache-Control”头设置为no-store时启用压缩
			private		当“Cache-Control”头设置为private时启用压缩
			no_last_modified 	当“Last-Modified”没有定义时启用压缩
			no_etag		没有“ETag”头时启用压缩
			auth		当有一个“Authorization”头时启用压缩
			any			为所有请求启用压缩
gzip_disable "MSIE [1-6\.]";	#ie6以下的版本不压缩



fastcgi

nginx--socket--fastcgi--wrapper--app 

span-fcgi和php-fpm是支持php的两个fastcgi进程管理器

PHP-FPM也是一个第三方的FastCGI进程管理器，它是作为PHP的一个补丁来开发的，在安装的时候也需要和PHP源码一起编译，也就是说PHP-FPM被编译到PHP内核中，因此在处理性能方面更加优秀；同时它在处理高并发方面也比spawn-fcgi引擎好很多，因此，推荐Nginx+PHP/PHP-FPM这个组合对PHP进行解析

FastCGI 的主要优点是把动态语言和HTTP Server分离开来，所以Nginx与PHP/PHP-FPM经常被部署在不同的服务器上，以分担前端Nginx服务器的压力，使Nginx专一处理静态请求和转发动态请求，而PHP/PHP-FPM服务器专一解析PHP动态请求


fastcgi_bin
fastcgi_buffer_size size			#指定读取fastcgi应答需要的缓冲大小
fastcgi_buffering on|off
fastcgi_buffers num					#用多大缓冲区缓冲fastcgi请求
fastcgi_busy_buffers_size size		#默认是fastcgi_buffer的两倍
fastcgi_cache  zone|off				#开启fastcgi缓存
fastcgi_cache_lock on|off
fastcgi_cache_lock_age time
fastcgi_cache_lock_timeout time
fastcgi_cache_methods  get|head|post
fastcgi_cache_min_user num
fastcgi_cache_path path
fastcgi_cache_purge string
fastcgi_cache_revalidate on|off
fastcgi_cache_use_stale  error|timeout|invalid_header|updating|http_500|http_503|http_403|http_404|off ...;
fastcgi_cache_valid [code ...] time	#定应答代码的缓存时间
fastcgi_connect_timeout time;		#指定连接后端的超时时间
fastcgi_send_timeout				#向fastcgi传送请求的超时时间
fastcgi_read_timeout				#接收应答的超时时间
fastcgi_temp_file_write_size		#写入缓存需要多大的数据块，默认是fastcgi_buffer的两倍




proxy(ngx_http_proxy_module)

proxy_bind
proxy_buffer_size					#缓冲区大小
proxy_buffering
proxy_buffers						#缓冲区的数量与大小
proxy_busy_buffers_size				#系统忙时的缓冲区大小
proxy_cache
proxy_cache_bypass
proxy_cache_key
proxy_cache_lock
proxy_cache_lock_age
proxy__cache_lock_timeout
proxy_cache_methods
proxy_cache_min_uses
proxy_cache_path					#缓存目录
proxy_cache_purge
proxy_cache_revalidate
proxy_cache_use_stale
proxy_cache_valid
proxy_connect_timeout				#server的连接超时时间
proxy_cookie_domain
proxy_cookie_path
proxy_force_ranges
proxy_headers_hash_bucket_size
proxy_headers_hash_max_size
proxy_hide_header
proxy_http_version
proxy_ignore_client_abort
proxy_ignore_headers
proxy_intercept_errors
proxy_limit_rate
proxy_max_temp_file_size
proxy_method
proxy_next_upstream				#指定故障转移策略
proxy_next_upstream_timeout
proxy_next_upstream_tries
proxy_no_cache
proxy_pass						#指定后端服务器的地址和端口，也可是upstream名
proxy_pass_header
proxy_pass_request_body
proxy_pass_request_headers
proxy_read_timeout				#nginx从后端server读取信息的超时时间
proxy_redirect					#对发送给客户端的URL进行修改
proxy_request_buffering
proxy_send_lowat
proxy_send_timeout				#数据发送超时时间
proxy_set_body
proxy_set_header



proxy_set_header Host $host:$server_port;
proxy_set_header X-Forwarded-Host $host;
proxy_set_header X-Forwarded-Server $host;
proxy_set_header X-Real-IP        $remote_addr;
proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
http://blog.csdn.net/tianmohust/article/details/8209086
				
proxy_ssl_certificate
proxy_ssl_certificate_key
proxy_ssl_ciphers
proxy_ssl_crl
proxy_ssl_name
proxy_ssl_password_file
proxy_ssl_server_name
proxy_ssl_session_reuse
proxy_ssl_protocols
proxy_ssl_trusted_certificate
proxy_ssl_verify
proxy_ssl_verify_depth
proxy_store
proxy_store_access
proxy_temp_file_write_size
proxy_temp_path						#缓存临时目录

proxy_set_header Host $Host			#指定后端server获取client的主机名与地址和代理的真实ip




upstream(ngx_http_upstream_module)

proxy_pass,fastcgi_pass,uwsgi_pass,scgi_pass,memcached_pass可以引用

upstream{
server
zone
hash
ip_hash 				#负载均衡用到的算法
keepalive
least_conn				#负载均衡用到的算法
least_time
health_check
match
queue
sticky
sticky_cookie_insert
}


每个设备的状态设置为:
1.down 表示server暂时不参与负载
2.weight 默认为1.weight越大，负载的权重就越大。
3.max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误
4.fail_timeout:max_fails次失败后，暂停的时间。
5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。



location匹配规则
~			#区分大小写
~*			#不区分大小写
^~			#表示普通字符匹配，如果该选项匹配，只匹配该选项，不匹配别的选项，一般用来匹配目录

^			#以 开头的匹配
$			#以 结尾的匹配
=			#普通字符精确匹配
@			#定义一个命名的 location，使用在内部定向时

文件及目录匹配
-f !-f		#判断文件是否存在
-d !-d		#判断目录是否存在
-e !-e		#判断文件或目录是否存在
-x !-x		#判断文件是否可执行






Save this file as [{{#file: nginx}} /etc/init.d/nginx]

#!/bin/sh
#
# nginx - this script starts and stops the nginx daemon
#
# chkconfig:   - 85 15 
# description:  Nginx is an HTTP(S) server, HTTP(S) reverse \
#               proxy and IMAP/POP3 proxy server
# processname: nginx
# config:      /etc/nginx/nginx.conf
# config:      /etc/sysconfig/nginx
# pidfile:     /var/run/nginx.pid
 
# Source function library.
. /etc/rc.d/init.d/functions
 
# Source networking configuration.
. /etc/sysconfig/network
 
# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0
 
nginx="/usr/sbin/nginx"
prog=$(basename $nginx)
 
NGINX_CONF_FILE="/etc/nginx/nginx.conf"
 
[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx
 
lockfile=/var/lock/subsys/nginx
 
make_dirs() {
   # make required directories
   user=`$nginx -V 2>&1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`
   if [ -z "`grep $user /etc/passwd`" ]; then
       useradd -M -s /bin/nologin $user
   fi
   options=`$nginx -V 2>&1 | grep 'configure arguments:'`
   for opt in $options; do
       if [ `echo $opt | grep '.*-temp-path'` ]; then
           value=`echo $opt | cut -d "=" -f 2`
           if [ ! -d "$value" ]; then
               # echo "creating" $value
               mkdir -p $value && chown -R $user $value
           fi
       fi
   done
}
 
start() {
    [ -x $nginx ] || exit 5
    [ -f $NGINX_CONF_FILE ] || exit 6
    make_dirs
    echo -n $"Starting $prog: "
    daemon $nginx -c $NGINX_CONF_FILE
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}
 
stop() {
    echo -n $"Stopping $prog: "
    killproc $prog -QUIT
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}
 
restart() {
    configtest || return $?
    stop
    sleep 1
    start
}
 
reload() {
    configtest || return $?
    echo -n $"Reloading $prog: "
    killproc $nginx -HUP
    RETVAL=$?
    echo
}
 
force_reload() {
    restart
}
 
configtest() {
  $nginx -t -c $NGINX_CONF_FILE
}
 
rh_status() {
    status $prog
}
 
rh_status_q() {
    rh_status >/dev/null 2>&1
}
 
case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart|configtest)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
            ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
        exit 2
esac